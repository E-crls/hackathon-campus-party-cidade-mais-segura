import { useState, useCallback } from 'react';
import { orbisAPI } from '../services/api';
import type { ChatMessage } from '../schemas';

interface UseChatWizardOptions {
  initialMessage?: ChatMessage;
  onError?: (error: Error) => void;
}

export function useChatWizard(options: UseChatWizardOptions = {}) {
  const defaultInitialMessage: ChatMessage = {
    id: '1',
    content: 'Ol√°! üëã Sou seu assistente IA especializado em an√°lise de desordens urbanas. \n\nüõ∞Ô∏è **Minhas capacidades:**\n‚Ä¢ An√°lise de dados satelitais em tempo real\n‚Ä¢ Predi√ß√µes de risco com IA\n‚Ä¢ Recomenda√ß√µes baseadas em evid√™ncias\n‚Ä¢ Insights de correla√ß√£o entre fatores urbanos\n\n**Como posso auxiliar sua gest√£o urbana hoje?**',
    sender: 'ai',
    timestamp: new Date(),
    suggestions: [
      'Quais s√£o as √°reas mais cr√≠ticas agora?',
      'Previs√µes para os pr√≥ximos 30 dias',
      'Recomenda√ß√µes de a√ß√£o imediata',
      'Como funciona a an√°lise satelital?'
    ],
  };

  const [messages, setMessages] = useState<ChatMessage[]>([
    options.initialMessage || defaultInitialMessage
  ]);
  const [isTyping, setIsTyping] = useState(false);

  const addMessage = useCallback((content: string, sender: ChatMessage['sender'], suggestions?: string[]) => {
    const newMessage: ChatMessage = {
      id: Date.now().toString(),
      content,
      sender,
      timestamp: new Date(),
      suggestions,
    };
    setMessages(prev => [...prev, newMessage]);
  }, []);

  const clearMessages = useCallback(() => {
    setMessages([options.initialMessage || defaultInitialMessage]);
  }, [options.initialMessage]);

  const generateContextualSuggestions = useCallback((content: string): string[] => {
    const contentLower = content.toLowerCase();
    
    // Sugest√µes mais espec√≠ficas e inteligentes baseadas no contexto
    const suggestionMap = {
      // √Åreas cr√≠ticas e emergenciais
      'cr√≠ticas|grave|urgente|emergencial|priorit√°rio': [
        'Como resolver rapidamente?', 
        'Qual o cronograma de a√ß√£o?', 
        'Investimento necess√°rio?', 
        'Equipes envolvidas?'
      ],
      
      // An√°lises e dados
      'dados|an√°lise|estat√≠stica|n√∫meros|m√©trica': [
        'Dados hist√≥ricos detalhados', 
        'Compara√ß√£o com outras regi√µes', 
        'Relat√≥rio t√©cnico completo', 
        'Metodologia utilizada'
      ],
      
      // Previs√µes e tend√™ncias
      'previs√£o|futuro|pr√≥ximo|tend√™ncia|aumento|padr√£o': [
        'Como prevenir problemas?', 
        'A√ß√µes preventivas recomendadas', 
        'An√°lise de cen√°rios', 
        'Impacto a longo prazo'
      ],
      
      // Recomenda√ß√µes e solu√ß√µes
      'recomenda√ß√£o|a√ß√£o|sugest√£o|resolver|solu√ß√£o|plano': [
        'Cronograma de implementa√ß√£o', 
        'Recursos humanos necess√°rios', 
        'Or√ßamento estimado', 
        'Indicadores de sucesso'
      ],
      
      // Seguran√ßa e crime
      'seguran√ßa|crime|viol√™ncia|patrulhamento|policial': [
        'Mapeamento de riscos detalhado', 
        'Estrat√©gias de preven√ß√£o', 
        'Monitoramento em tempo real', 
        'Correla√ß√£o com ilumina√ß√£o'
      ],
      
      // Infraestrutura e ilumina√ß√£o
      'ilumina√ß√£o|energia|el√©trica|poste|luz|infraestrutura': [
        'Plano de expans√£o', 
        'Manuten√ß√£o preventiva', 
        'Tecnologias recomendadas', 
        'Cronograma de obras'
      ],
      
      // Limpeza e res√≠duos
      'lixo|res√≠duo|limpeza|coleta|ambiental': [
        'Otimiza√ß√£o de rotas', 
        'Frequ√™ncia ideal de coleta', 
        'Pontos cr√≠ticos mapeados', 
        'Custos operacionais'
      ],
      
      // Constru√ß√µes e fiscaliza√ß√£o
      'constru√ß√£o|obra|irregular|fiscaliza√ß√£o': [
        'Processo de regulariza√ß√£o', 
        'Multas e penalidades', 
        'Cronograma de fiscaliza√ß√£o', 
        'Impacto urbano'
      ],
      
      // Regi√µes espec√≠ficas
      'taguatinga|ceil√¢ndia|sobradinho|bras√≠lia|plano.piloto': [
        'An√°lise regional espec√≠fica', 
        'Comparar com outras regi√µes', 
        'Hist√≥rico da √°rea', 
        'Prioridades locais'
      ],
      
      // Metodologia e tecnologia
      'como|metodologia|algoritmo|modelo|tecnologia|sat√©lite': [
        'Detalhes t√©cnicos', 
        'Precis√£o dos modelos', 
        'Fontes de dados', 
        'Limita√ß√µes do sistema'
      ],
      
      // Respostas de agradecimento
      'obrigado|obrigada|valeu|brigad√£o': [
        'An√°lise de outras √°reas?', 
        'Relat√≥rio personalizado?', 
        'Acompanhamento cont√≠nuo?', 
        'Insights adicionais?'
      ],
      
      // Contexto fora do escopo
      'futebol|comida|filme|m√∫sica|pessoal|amor|sa√∫de': [
        'An√°lise de √°reas cr√≠ticas', 
        'Previs√µes urbanas', 
        'Recomenda√ß√µes de a√ß√£o', 
        'Dados satelitais'
      ]
    };

    // Procurar por correspond√™ncias mais espec√≠ficas primeiro
    for (const [keywords, suggestions] of Object.entries(suggestionMap)) {
      const regex = new RegExp(keywords, 'i');
      if (regex.test(contentLower)) {
        // Randomizar as sugest√µes para variedade
        const shuffled = [...suggestions].sort(() => 0.5 - Math.random());
        return shuffled.slice(0, 3); // Retornar apenas 3 sugest√µes
      }
    }

    // Sugest√µes padr√£o contextuais
    const defaultSuggestions = [
      ['Explique as √°reas mais cr√≠ticas', 'An√°lise de tend√™ncias', 'Recomenda√ß√µes priorit√°rias'],
      ['Dados em tempo real', 'Previs√µes para pr√≥ximo m√™s', 'Como resolver rapidamente?'],
      ['Metodologia dos modelos', 'Investimento necess√°rio', 'Cronograma de a√ß√µes'],
      ['Compara√ß√£o entre regi√µes', 'Impacto das solu√ß√µes', 'Monitoramento cont√≠nuo']
    ];
    
    const randomIndex = Math.floor(Math.random() * defaultSuggestions.length);
    return defaultSuggestions[randomIndex];
  }, []);

  const sendMessage = useCallback(async (message: string) => {
    try {
      addMessage(message, 'user');
      setIsTyping(true);
      
      const response = await orbisAPI.askAI(message);
      const suggestions = generateContextualSuggestions(response);
      
      setIsTyping(false);
      addMessage(response, 'ai', suggestions);
      
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
      setIsTyping(false);
      
      const errorMessage = 'Desculpe, ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente ou reformule sua pergunta.';
      const errorSuggestions = ['Tentar novamente', 'Ajuda com comandos', 'Falar com suporte'];
      
      addMessage(errorMessage, 'ai', errorSuggestions);
      
      if (options.onError) {
        options.onError(error as Error);
      }
    }
  }, [addMessage, generateContextualSuggestions, options]);

  return {
    messages,
    isTyping,
    sendMessage,
    addMessage,
    clearMessages,
    generateContextualSuggestions
  };
} 