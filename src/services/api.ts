import type { KPIData, Occurrence, Region, MapFilter } from '../schemas';

// üîÑ Mock Data (simulando API real)
const mockKPIs: KPIData = {
  critical: { value: 47, trend: 12 },
  monitoring: { value: 156, trend: -8 },
  resolved: { value: 289, trend: 24 },
  predictions: { value: 78, accuracy: 92 }
};

const mockOccurrences: Occurrence[] = [
  {
    id: '1',
    type: 'lighting',
    count: 45,
    priority: 'high',
    region: 'Taguatinga',
    description: 'Ilumina√ß√£o p√∫blica deficiente na regi√£o central',
    lat: -15.8386,
    lng: -48.0494,
    status: 'pending',
    createdAt: new Date('2024-01-01'),
    updatedAt: new Date('2024-01-15'),
  },
  {
    id: '2',
    type: 'waste',
    count: 32,
    priority: 'medium',
    region: 'Ceil√¢ndia',
    description: 'Ac√∫mulo de lixo em pontos espec√≠ficos',
    lat: -15.8159,
    lng: -48.1070,
    status: 'in_progress',
    createdAt: new Date('2024-01-02'),
    updatedAt: new Date('2024-01-16'),
  },
  {
    id: '3',
    type: 'construction',
    count: 28,
    priority: 'high',
    region: 'Sobradinho',
    description: 'Constru√ß√µes irregulares identificadas',
    lat: -15.6533,
    lng: -47.7869,
    status: 'pending',
    createdAt: new Date('2024-01-03'),
    updatedAt: new Date('2024-01-17'),
  },
  {
    id: '4',
    type: 'degraded',
    count: 18,
    priority: 'low',
    region: 'Plano Piloto',
    description: '√Åreas com degrada√ß√£o urbana',
    lat: -15.7801,
    lng: -47.9292,
    status: 'resolved',
    createdAt: new Date('2024-01-04'),
    updatedAt: new Date('2024-01-18'),
  },
];

const mockRegions: Region[] = [
  {
    id: '1',
    name: 'Taguatinga',
    lat: -15.8386,
    lng: -48.0494,
    occurrences: 45,
    status: 'critical',
  },
  {
    id: '2',
    name: 'Ceil√¢ndia',
    lat: -15.8159,
    lng: -48.1070,
    occurrences: 32,
    status: 'warning',
  },
  {
    id: '3',
    name: 'Sobradinho',
    lat: -15.6533,
    lng: -47.7869,
    occurrences: 28,
    status: 'warning',
  },
  {
    id: '4',
    name: 'Plano Piloto',
    lat: -15.7801,
    lng: -47.9292,
    occurrences: 18,
    status: 'normal',
  },
];

// ü§ñ AI Response Templates
const aiResponses = [
  "Com base na an√°lise dos dados, identifiquei que a regi√£o de **Taguatinga** apresenta o maior n√∫mero de ocorr√™ncias cr√≠ticas (45), principalmente relacionadas √† ilumina√ß√£o p√∫blica deficiente. Recomendo priorizar a√ß√µes de melhoria na infraestrutura de ilumina√ß√£o dessa regi√£o.",
  
  "Os dados mostram uma tend√™ncia de **aumento de 12%** nas ocorr√™ncias cr√≠ticas em rela√ß√£o ao m√™s anterior. As principais causas est√£o relacionadas a: 1) Ilumina√ß√£o prec√°ria (35%), 2) Lixo acumulado (26%), 3) Constru√ß√µes irregulares (22%), 4) √Åreas degradadas (17%).",
  
  "Para o pr√≥ximo m√™s, nossos modelos de IA preveem um poss√≠vel aumento nas ocorr√™ncias de **lixo acumulado** na regi√£o de Ceil√¢ndia, com base em padr√µes hist√≥ricos e eventos sazonais. Sugiro implementar a√ß√µes preventivas de coleta intensificada.",
  
  "**Recomenda√ß√µes priorit√°rias:**\n\n1. **Ilumina√ß√£o**: Instalar 150 novos pontos de luz em Taguatinga\n2. **Limpeza**: Ampliar coleta em Ceil√¢ndia em 40%\n3. **Fiscaliza√ß√£o**: Intensificar monitoramento de constru√ß√µes em Sobradinho\n4. **Investimento estimado**: R$ 2,3 milh√µes para resolver 80% das ocorr√™ncias cr√≠ticas",
];

// üöÄ API Service Class
export class OrbisAPIService {
  private static instance: OrbisAPIService;
  
  public static getInstance(): OrbisAPIService {
    if (!OrbisAPIService.instance) {
      OrbisAPIService.instance = new OrbisAPIService();
    }
    return OrbisAPIService.instance;
  }

  // üìä Get KPIs
  async getKPIs(): Promise<KPIData> {
    // Simulate API delay
    await this.sleep(800);
    return mockKPIs;
  }

  // üéØ Get Occurrences
  async getOccurrences(filter?: MapFilter): Promise<Occurrence[]> {
    await this.sleep(600);
    
    let filtered = [...mockOccurrences];
    
    if (filter?.type && filter.type !== 'all') {
      if (filter.type === 'critical') {
        filtered = filtered.filter(o => o.priority === 'high');
      } else {
        filtered = filtered.filter(o => o.type === filter.type);
      }
    }
    
    if (filter?.region) {
      filtered = filtered.filter(o => 
        o.region.toLowerCase().includes(filter.region!.toLowerCase())
      );
    }
    
    return filtered;
  }

  // üó∫Ô∏è Get Regions
  async getRegions(): Promise<Region[]> {
    await this.sleep(500);
    return mockRegions;
  }

  // ü§ñ Ask AI
  async askAI(question: string): Promise<string> {
    await this.sleep(1500); // Simulate AI processing time
    
    // Simple keyword-based response selection
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('cr√≠tica') || lowerQuestion.includes('pior')) {
      return aiResponses[0];
    }
    
    if (lowerQuestion.includes('tend√™ncia') || lowerQuestion.includes('aumento')) {
      return aiResponses[1];
    }
    
    if (lowerQuestion.includes('previs√£o') || lowerQuestion.includes('pr√≥ximo')) {
      return aiResponses[2];
    }
    
    if (lowerQuestion.includes('recomenda√ß√£o') || lowerQuestion.includes('a√ß√£o')) {
      return aiResponses[3];
    }
    
    // Default response
    return "Entendi sua pergunta. Com base nos dados dispon√≠veis, posso fornecer insights espec√≠ficos sobre as desordens urbanas no Distrito Federal. Voc√™ gostaria de saber sobre algum aspecto espec√≠fico como tend√™ncias, previs√µes ou recomenda√ß√µes de a√ß√£o?";
  }

  // üîß Utility method
  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Export singleton instance
export const orbisAPI = OrbisAPIService.getInstance(); 